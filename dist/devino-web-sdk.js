!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Devino=t():e.Devino=t()}(window,(function(){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t),n.d(t,"init",(function(){return c})),n.d(t,"updateCustomerData",(function(){return s})),n.d(t,"customerSubscribe",(function(){return a})),n.d(t,"sendEvent",(function(){return d})),n.d(t,"getSettings",(function(){return l}));let o="",r="";const i=(e,t={})=>fetch("http://localhost:3000"+e,{credentials:"include",...t,headers:{"Content-Type":"application/json","X-API-KEY":o,"X-DEVINO-APP-ID":r,...t.headers}}),u=e=>e.ok?e:e.json().then(e=>Promise.reject(e.message)),c=({apiKey:e,appId:t})=>{o=e,r=t},s=({email:e,phone:t,pushToken:n,customData:o={}})=>i("/customers/data",{method:"PUT",body:JSON.stringify({email:e,phone:t,pushToken:n,customData:o,reportedDateTimeUtc:new Date})}).then(u).then(e=>e.json()).then(e=>(console.log(e),e)).catch(e=>(console.error(e),e)),a=({subscribtionChannel:e,subscribed:t})=>i("/customers/subscription",{method:"PUT",body:JSON.stringify({subscribtionChannel:e,subscribed:t,reportedDateTimeUtc:new Date})}).then(u).then(e=>e.json()).then(e=>(console.log(e),e)).catch(e=>(console.error(e),e)),d=({eventName:e,eventData:t={}})=>i("/users/event",{method:"POST",body:JSON.stringify({eventName:e,eventData:t,reportedDateTimeUtc:new Date})}).then(u).then(e=>e.json()).then(e=>(console.log(e),e)).catch(e=>(console.error(e),e)),l=()=>({API_KEY:o,APP_ID:r,BASE_URL:"http://localhost:3000"})}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,